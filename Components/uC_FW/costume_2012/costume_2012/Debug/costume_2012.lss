
costume_2012.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000a00  00000a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080010a  0080010a  00000a9e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  000011f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbc  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000430  00000000  00000000  00001fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071a  00000000  00000000  00002404  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043b  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000066b  00000000  00000000  000030c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <main>
  9e:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_lp_filter>:
#define LPF_A1 0x0000ECA7

#define NOMINAL_Y_ACCEL 0x00580000	//Split the difference between 0x59 and 0x58

int32_t adc_lp_filter(uint8_t adc_sample)
{
  a6:	8f 92       	push	r8
  a8:	9f 92       	push	r9
  aa:	af 92       	push	r10
  ac:	bf 92       	push	r11
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	c8 2f       	mov	r28, r24
	//the problem is adding two small #'s: it can lead to incorrect results
	//The solution in this case is to add the two numbers then multiply them
	//This works since B0 and B1 are the same #
	temp = (int32_t)adc_sample*LPF_B0;
	temp2 = (int32_t)last_sample*LPF_B1;
	temp3 = ((int64_t)last_result*LPF_A1)>>16;
  be:	80 91 01 01 	lds	r24, 0x0101
  c2:	90 91 02 01 	lds	r25, 0x0102
  c6:	a0 91 03 01 	lds	r26, 0x0103
  ca:	b0 91 04 01 	lds	r27, 0x0104
  ce:	6c 01       	movw	r12, r24
  d0:	7d 01       	movw	r14, r26
  d2:	ff 0c       	add	r15, r15
  d4:	cc 08       	sbc	r12, r12
  d6:	dc 2c       	mov	r13, r12
  d8:	76 01       	movw	r14, r12
  da:	28 2f       	mov	r18, r24
  dc:	39 2f       	mov	r19, r25
  de:	4a 2f       	mov	r20, r26
  e0:	5b 2f       	mov	r21, r27
  e2:	6c 2d       	mov	r22, r12
  e4:	7c 2d       	mov	r23, r12
  e6:	8c 2d       	mov	r24, r12
  e8:	9c 2d       	mov	r25, r12
  ea:	0f 2e       	mov	r0, r31
  ec:	f7 ea       	ldi	r31, 0xA7	; 167
  ee:	af 2e       	mov	r10, r31
  f0:	f0 2d       	mov	r31, r0
  f2:	0f 2e       	mov	r0, r31
  f4:	fc ee       	ldi	r31, 0xEC	; 236
  f6:	bf 2e       	mov	r11, r31
  f8:	f0 2d       	mov	r31, r0
  fa:	cc 24       	eor	r12, r12
  fc:	dd 24       	eor	r13, r13
  fe:	ee 24       	eor	r14, r14
 100:	ff 24       	eor	r15, r15
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	10 e0       	ldi	r17, 0x00	; 0
 106:	0e 94 67 03 	call	0x6ce	; 0x6ce <__muldi3>
 10a:	00 e1       	ldi	r16, 0x10	; 16
 10c:	0e 94 3a 04 	call	0x874	; 0x874 <__ashrdi3>
 110:	82 2e       	mov	r8, r18
 112:	93 2e       	mov	r9, r19
 114:	a4 2e       	mov	r10, r20
 116:	b5 2e       	mov	r11, r21
	//result = B0*adc_sample + B1*last_sample - A1*last_result
	//the problem is adding two small #'s: it can lead to incorrect results
	//The solution in this case is to add the two numbers then multiply them
	//This works since B0 and B1 are the same #
	temp = (int32_t)adc_sample*LPF_B0;
	temp2 = (int32_t)last_sample*LPF_B1;
 118:	60 91 00 01 	lds	r22, 0x0100
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	2c ea       	ldi	r18, 0xAC	; 172
 124:	39 e0       	ldi	r19, 0x09	; 9
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsi3>
 12e:	dc 01       	movw	r26, r24
 130:	cb 01       	movw	r24, r22
	temp3 = ((int64_t)last_result*LPF_A1)>>16;
	
	result = temp + temp2 + (int32_t)temp3;
 132:	6c 01       	movw	r12, r24
 134:	7d 01       	movw	r14, r26
 136:	c8 0c       	add	r12, r8
 138:	d9 1c       	adc	r13, r9
 13a:	ea 1c       	adc	r14, r10
 13c:	fb 1c       	adc	r15, r11
	//Floating point warning!  Don't do this:
	//result = B0*adc_sample + B1*last_sample - A1*last_result
	//the problem is adding two small #'s: it can lead to incorrect results
	//The solution in this case is to add the two numbers then multiply them
	//This works since B0 and B1 are the same #
	temp = (int32_t)adc_sample*LPF_B0;
 13e:	6c 2f       	mov	r22, r28
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsi3>
 14a:	dc 01       	movw	r26, r24
 14c:	cb 01       	movw	r24, r22
	temp2 = (int32_t)last_sample*LPF_B1;
	temp3 = ((int64_t)last_result*LPF_A1)>>16;
	
	result = temp + temp2 + (int32_t)temp3;
 14e:	c8 0e       	add	r12, r24
 150:	d9 1e       	adc	r13, r25
 152:	ea 1e       	adc	r14, r26
 154:	fb 1e       	adc	r15, r27
	
	last_result = result;
 156:	c0 92 01 01 	sts	0x0101, r12
 15a:	d0 92 02 01 	sts	0x0102, r13
 15e:	e0 92 03 01 	sts	0x0103, r14
 162:	f0 92 04 01 	sts	0x0104, r15
	last_sample = adc_sample;
 166:	c0 93 00 01 	sts	0x0100, r28
	
	return result; 
}
 16a:	6c 2d       	mov	r22, r12
 16c:	7d 2d       	mov	r23, r13
 16e:	8e 2d       	mov	r24, r14
 170:	9f 2d       	mov	r25, r15
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	cf 90       	pop	r12
 180:	bf 90       	pop	r11
 182:	af 90       	pop	r10
 184:	9f 90       	pop	r9
 186:	8f 90       	pop	r8
 188:	08 95       	ret

0000018a <adc_hp_filter>:
#define HPF_B0 0x000322A9	//3.1354
#define HPF_B1 0x000322A9	//3.1354
#define HPF_A1 0x0000FEFF	//.99608

int32_t adc_hp_filter(int32_t adc_sample)
{
 18a:	4f 92       	push	r4
 18c:	5f 92       	push	r5
 18e:	6f 92       	push	r6
 190:	7f 92       	push	r7
 192:	8f 92       	push	r8
 194:	9f 92       	push	r9
 196:	af 92       	push	r10
 198:	bf 92       	push	r11
 19a:	cf 92       	push	r12
 19c:	df 92       	push	r13
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	28 97       	sbiw	r28, 0x08	; 8
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
 1ba:	2b 01       	movw	r4, r22
 1bc:	3c 01       	movw	r6, r24
	static int32_t last_sample=NOMINAL_Y_ACCEL;
	static int32_t last_result = 0x00000000;
	int32_t result;
	int32_t temp, temp2, temp3;

	temp = (int32_t)((((int64_t)last_result*HPF_A1))>>16);
 1be:	80 91 12 01 	lds	r24, 0x0112
 1c2:	90 91 13 01 	lds	r25, 0x0113
 1c6:	a0 91 14 01 	lds	r26, 0x0114
 1ca:	b0 91 15 01 	lds	r27, 0x0115
 1ce:	6c 01       	movw	r12, r24
 1d0:	7d 01       	movw	r14, r26
 1d2:	ff 0c       	add	r15, r15
 1d4:	cc 08       	sbc	r12, r12
 1d6:	dc 2c       	mov	r13, r12
 1d8:	76 01       	movw	r14, r12
 1da:	28 2f       	mov	r18, r24
 1dc:	39 2f       	mov	r19, r25
 1de:	4a 2f       	mov	r20, r26
 1e0:	5b 2f       	mov	r21, r27
 1e2:	6c 2d       	mov	r22, r12
 1e4:	7c 2d       	mov	r23, r12
 1e6:	8c 2d       	mov	r24, r12
 1e8:	9c 2d       	mov	r25, r12
 1ea:	aa 24       	eor	r10, r10
 1ec:	aa 94       	dec	r10
 1ee:	0f 2e       	mov	r0, r31
 1f0:	fe ef       	ldi	r31, 0xFE	; 254
 1f2:	bf 2e       	mov	r11, r31
 1f4:	f0 2d       	mov	r31, r0
 1f6:	cc 24       	eor	r12, r12
 1f8:	dd 24       	eor	r13, r13
 1fa:	ee 24       	eor	r14, r14
 1fc:	ff 24       	eor	r15, r15
 1fe:	00 e0       	ldi	r16, 0x00	; 0
 200:	10 e0       	ldi	r17, 0x00	; 0
 202:	0e 94 67 03 	call	0x6ce	; 0x6ce <__muldi3>
 206:	00 e1       	ldi	r16, 0x10	; 16
 208:	0e 94 3a 04 	call	0x874	; 0x874 <__ashrdi3>
 20c:	29 83       	std	Y+1, r18	; 0x01
 20e:	3a 83       	std	Y+2, r19	; 0x02
 210:	4b 83       	std	Y+3, r20	; 0x03
 212:	5c 83       	std	Y+4, r21	; 0x04
 214:	6d 83       	std	Y+5, r22	; 0x05
 216:	7e 83       	std	Y+6, r23	; 0x06
 218:	8f 83       	std	Y+7, r24	; 0x07
 21a:	98 87       	std	Y+8, r25	; 0x08
	temp2 = (int32_t)((((int64_t)last_sample*HPF_B1))>>16);
 21c:	80 91 05 01 	lds	r24, 0x0105
 220:	90 91 06 01 	lds	r25, 0x0106
 224:	a0 91 07 01 	lds	r26, 0x0107
 228:	b0 91 08 01 	lds	r27, 0x0108
 22c:	6c 01       	movw	r12, r24
 22e:	7d 01       	movw	r14, r26
 230:	ff 0c       	add	r15, r15
 232:	cc 08       	sbc	r12, r12
 234:	dc 2c       	mov	r13, r12
 236:	76 01       	movw	r14, r12
 238:	28 2f       	mov	r18, r24
 23a:	39 2f       	mov	r19, r25
 23c:	4a 2f       	mov	r20, r26
 23e:	5b 2f       	mov	r21, r27
 240:	6c 2d       	mov	r22, r12
 242:	7c 2d       	mov	r23, r12
 244:	8c 2d       	mov	r24, r12
 246:	9c 2d       	mov	r25, r12
 248:	0f 2e       	mov	r0, r31
 24a:	f9 ea       	ldi	r31, 0xA9	; 169
 24c:	af 2e       	mov	r10, r31
 24e:	f0 2d       	mov	r31, r0
 250:	0f 2e       	mov	r0, r31
 252:	f2 e2       	ldi	r31, 0x22	; 34
 254:	bf 2e       	mov	r11, r31
 256:	f0 2d       	mov	r31, r0
 258:	0f 2e       	mov	r0, r31
 25a:	f3 e0       	ldi	r31, 0x03	; 3
 25c:	cf 2e       	mov	r12, r31
 25e:	f0 2d       	mov	r31, r0
 260:	dd 24       	eor	r13, r13
 262:	ee 24       	eor	r14, r14
 264:	ff 24       	eor	r15, r15
 266:	00 e0       	ldi	r16, 0x00	; 0
 268:	0e 94 67 03 	call	0x6ce	; 0x6ce <__muldi3>
 26c:	00 e1       	ldi	r16, 0x10	; 16
 26e:	0e 94 3a 04 	call	0x874	; 0x874 <__ashrdi3>
 272:	82 2e       	mov	r8, r18
 274:	93 2e       	mov	r9, r19
 276:	a4 2e       	mov	r10, r20
 278:	b5 2e       	mov	r11, r21
	temp3 = (int32_t)((((int64_t)adc_sample*HPF_B0))>>16);
	
	result = temp-temp2+temp3;
 27a:	89 81       	ldd	r24, Y+1	; 0x01
 27c:	9a 81       	ldd	r25, Y+2	; 0x02
 27e:	ab 81       	ldd	r26, Y+3	; 0x03
 280:	bc 81       	ldd	r27, Y+4	; 0x04
 282:	88 19       	sub	r24, r8
 284:	99 09       	sbc	r25, r9
 286:	aa 09       	sbc	r26, r10
 288:	bb 09       	sbc	r27, r11
 28a:	89 83       	std	Y+1, r24	; 0x01
 28c:	9a 83       	std	Y+2, r25	; 0x02
 28e:	ab 83       	std	Y+3, r26	; 0x03
 290:	bc 83       	std	Y+4, r27	; 0x04
	int32_t result;
	int32_t temp, temp2, temp3;

	temp = (int32_t)((((int64_t)last_result*HPF_A1))>>16);
	temp2 = (int32_t)((((int64_t)last_sample*HPF_B1))>>16);
	temp3 = (int32_t)((((int64_t)adc_sample*HPF_B0))>>16);
 292:	73 01       	movw	r14, r6
 294:	62 01       	movw	r12, r4
 296:	ff 0c       	add	r15, r15
 298:	cc 08       	sbc	r12, r12
 29a:	dc 2c       	mov	r13, r12
 29c:	76 01       	movw	r14, r12
 29e:	24 2d       	mov	r18, r4
 2a0:	35 2d       	mov	r19, r5
 2a2:	46 2d       	mov	r20, r6
 2a4:	57 2d       	mov	r21, r7
 2a6:	6c 2d       	mov	r22, r12
 2a8:	7c 2d       	mov	r23, r12
 2aa:	8c 2d       	mov	r24, r12
 2ac:	9c 2d       	mov	r25, r12
 2ae:	0f 2e       	mov	r0, r31
 2b0:	f9 ea       	ldi	r31, 0xA9	; 169
 2b2:	af 2e       	mov	r10, r31
 2b4:	f0 2d       	mov	r31, r0
 2b6:	0f 2e       	mov	r0, r31
 2b8:	f2 e2       	ldi	r31, 0x22	; 34
 2ba:	bf 2e       	mov	r11, r31
 2bc:	f0 2d       	mov	r31, r0
 2be:	0f 2e       	mov	r0, r31
 2c0:	f3 e0       	ldi	r31, 0x03	; 3
 2c2:	cf 2e       	mov	r12, r31
 2c4:	f0 2d       	mov	r31, r0
 2c6:	dd 24       	eor	r13, r13
 2c8:	ee 24       	eor	r14, r14
 2ca:	ff 24       	eor	r15, r15
 2cc:	00 e0       	ldi	r16, 0x00	; 0
 2ce:	0e 94 67 03 	call	0x6ce	; 0x6ce <__muldi3>
 2d2:	00 e1       	ldi	r16, 0x10	; 16
 2d4:	0e 94 3a 04 	call	0x874	; 0x874 <__ashrdi3>
 2d8:	82 2e       	mov	r8, r18
 2da:	93 2e       	mov	r9, r19
 2dc:	a4 2e       	mov	r10, r20
 2de:	b5 2e       	mov	r11, r21
	
	result = temp-temp2+temp3;
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	9a 81       	ldd	r25, Y+2	; 0x02
 2e4:	ab 81       	ldd	r26, Y+3	; 0x03
 2e6:	bc 81       	ldd	r27, Y+4	; 0x04
 2e8:	88 0e       	add	r8, r24
 2ea:	99 1e       	adc	r9, r25
 2ec:	aa 1e       	adc	r10, r26
 2ee:	bb 1e       	adc	r11, r27
	last_result = result;
 2f0:	80 92 12 01 	sts	0x0112, r8
 2f4:	90 92 13 01 	sts	0x0113, r9
 2f8:	a0 92 14 01 	sts	0x0114, r10
 2fc:	b0 92 15 01 	sts	0x0115, r11
	last_sample = adc_sample;
 300:	40 92 05 01 	sts	0x0105, r4
 304:	50 92 06 01 	sts	0x0106, r5
 308:	60 92 07 01 	sts	0x0107, r6
 30c:	70 92 08 01 	sts	0x0108, r7
	return result;
}
 310:	68 2d       	mov	r22, r8
 312:	79 2d       	mov	r23, r9
 314:	8a 2d       	mov	r24, r10
 316:	9b 2d       	mov	r25, r11
 318:	28 96       	adiw	r28, 0x08	; 8
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	f8 94       	cli
 31e:	de bf       	out	0x3e, r29	; 62
 320:	0f be       	out	0x3f, r0	; 63
 322:	cd bf       	out	0x3d, r28	; 61
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	df 90       	pop	r13
 332:	cf 90       	pop	r12
 334:	bf 90       	pop	r11
 336:	af 90       	pop	r10
 338:	9f 90       	pop	r9
 33a:	8f 90       	pop	r8
 33c:	7f 90       	pop	r7
 33e:	6f 90       	pop	r6
 340:	5f 90       	pop	r5
 342:	4f 90       	pop	r4
 344:	08 95       	ret

00000346 <compute_velocity>:

int16_t compute_velocity(/*This is already expressed in a 32-bit fixed-point integer*/int32_t filtered_y_accel)	
{
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	dc 01       	movw	r26, r24
 34c:	cb 01       	movw	r24, r22
	static int32_t current_velocity= 0x00000000;
	static int32_t last_accel = 0x00000000;
	
	current_velocity += ((last_accel+filtered_y_accel)>>1);
 34e:	40 91 16 01 	lds	r20, 0x0116
 352:	50 91 17 01 	lds	r21, 0x0117
 356:	60 91 18 01 	lds	r22, 0x0118
 35a:	70 91 19 01 	lds	r23, 0x0119
 35e:	48 0f       	add	r20, r24
 360:	59 1f       	adc	r21, r25
 362:	6a 1f       	adc	r22, r26
 364:	7b 1f       	adc	r23, r27
 366:	75 95       	asr	r23
 368:	67 95       	ror	r22
 36a:	57 95       	ror	r21
 36c:	47 95       	ror	r20
 36e:	00 91 1a 01 	lds	r16, 0x011A
 372:	10 91 1b 01 	lds	r17, 0x011B
 376:	20 91 1c 01 	lds	r18, 0x011C
 37a:	30 91 1d 01 	lds	r19, 0x011D
 37e:	40 0f       	add	r20, r16
 380:	51 1f       	adc	r21, r17
 382:	62 1f       	adc	r22, r18
 384:	73 1f       	adc	r23, r19
 386:	40 93 1a 01 	sts	0x011A, r20
 38a:	50 93 1b 01 	sts	0x011B, r21
 38e:	60 93 1c 01 	sts	0x011C, r22
 392:	70 93 1d 01 	sts	0x011D, r23
	last_accel = filtered_y_accel;
 396:	80 93 16 01 	sts	0x0116, r24
 39a:	90 93 17 01 	sts	0x0117, r25
 39e:	a0 93 18 01 	sts	0x0118, r26
 3a2:	b0 93 19 01 	sts	0x0119, r27

	return (current_velocity>>16);	//Return only integer portion
 3a6:	ab 01       	movw	r20, r22
 3a8:	77 27       	eor	r23, r23
 3aa:	57 fd       	sbrc	r21, 7
 3ac:	70 95       	com	r23
 3ae:	67 2f       	mov	r22, r23
}
 3b0:	84 2f       	mov	r24, r20
 3b2:	95 2f       	mov	r25, r21
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	08 95       	ret

000003ba <main>:
	
	//PC4 - Generic Switch Input
	
	//ATMega328 Datasheet Table 14-1 Pg 78
	//Configuring pin PC4 for input, pullup
	CLEAR(DDRC,4);	//Direction: Input
 3ba:	3c 98       	cbi	0x07, 4	; 7
	SET(PORTC,4);	//Pullup: Enabled
 3bc:	44 9a       	sbi	0x08, 4	; 8
	
	//ATMega328 Datasheet Table 14-1 Pg 78
	//Heartbeat LED - PD7
	//Set as Output High (initially)
	SET(DDRD,7);	//Direction: output
 3be:	57 9a       	sbi	0x0a, 7	; 10
	CLEAR(PORTD,7);	//State: Lo
 3c0:	5f 98       	cbi	0x0b, 7	; 11

	PRR = 0x00;	//DIsable all power reduction
 3c2:	10 92 64 00 	sts	0x0064, r1
	
	//ATMega328 Datasheet Section 16.11.1 pg 132 - TCCR1A
	//No waveform generation is required on this timer, so set all 
	//ports to normal operation
	
	TCCR1A = 0x00;
 3c6:	10 92 80 00 	sts	0x0080, r1
    
	//ATMega328 Datasheet Section 16.11.3 pg 135 - TCCR1C
	//This register is used for output compare.  Again, we're not doing that
	//So this can be all 0's
	
	TCCR1C = 0x00;
 3ca:	10 92 82 00 	sts	0x0082, r1
	#define PERIOD_DECIMATE 40
	
	#define TIMER1_PERIOD PERIOD_800HZ
	
	//See?  It's obvious what's going on here
	TCNT1 = TIMER1_PERIOD;
 3ce:	89 ed       	ldi	r24, 0xD9	; 217
 3d0:	9f ef       	ldi	r25, 0xFF	; 255
 3d2:	90 93 85 00 	sts	0x0085, r25
 3d6:	80 93 84 00 	sts	0x0084, r24
	//Now to set the interrupt masks
	//I want no interrupts - we'll poll the overflow flag to determine when an overflow has occurred
	//ATMega328 Datasheet Section 16.11.8 Pg 136 - TIMSK1
	//No interrupts, all 0's
	
	TIMSK1 = 0x00;
 3da:	10 92 6f 00 	sts	0x006F, r1
	//Setting up Timer 0 for PWM mode
	//As per ATMega Datasheet Section 15.9.1 Page 105 Paragraph 1: the DDRn bits for the output compare lines
	//must be set to output for any of this to work
	//Output compare A - Port D pin 6
	//This is 
	SET(DDRD,6);	//Direction: output
 3de:	56 9a       	sbi	0x0a, 6	; 10
	//Fast PWM mode for Timer 0 
	//Count increases from 0x00 to 0xFF
	//It is SET at 0x00 and is CLEARED when it matches the output compare 
	//Period is set only according to the source

	TCNT0 = 0x00;
 3e0:	16 bc       	out	0x26, r1	; 38
	//ATMega328 Datasheet Section 15.9.1 Pg 105 - TCCR0A 
	TCCR0A =	(0x02<<6) |	//Noninverting PWM output A: Set output A at BOTTOM, CLEAR at compare match
 3e2:	83 ea       	ldi	r24, 0xA3	; 163
 3e4:	84 bd       	out	0x24, r24	; 36
				(0x02<<4) |	//Noninverting PWM output B
				(0x03);	//Fast PWM mode 3: RUn from 0x00 to 0xFF
				
	//ATMega328 Datasheet Section 15.9.2 Pg 108 - TCCR0B
	TIMSK0 =	0X00;		//No interupts needed
 3e6:	10 92 6e 00 	sts	0x006E, r1
	
	#define GREEN_PWM 0x80
	#define YELLOW_PWM 0x80
	#define RED_PWM 0x80
	
	OCR0A = YELLOW_PWM;
 3ea:	80 e8       	ldi	r24, 0x80	; 128
 3ec:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0x01;		//NOTE!: even at OCR0B at 0x00 it still turns on!  Turn the output off if you don't want 
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	88 bd       	out	0x28, r24	; 40
						//lights to turn on.
	
	TCCR0B =	(0x00<<7) |	//Force output compare A - not needed because of PWM
 3f2:	85 bd       	out	0x25, r24	; 37
	significant 8 bits are stored in one register.  Thus, if you left-adjust the result you only
	need to read one register to get the result*/
	
	/*ADC Channel - I only care about one - the Y axis on the accelerometer which is channel 1.*/
	
	ADMUX =		(0x01 << 6) /*Reference - AVCC - 5V. */ 
 3f4:	81 e6       	ldi	r24, 0x61	; 97
 3f6:	80 93 7c 00 	sts	0x007C, r24
	
	The ClkIO is 1MHz and the prescaler options are 2,4,8,16,32,64 and 128. 1MHz/8 = ~125KHz, so that seems good.
	That value is 3
	*/
	
	ADCSRA =	(0x01 << 7)	//Enable ADC
 3fa:	83 e8       	ldi	r24, 0x83	; 131
 3fc:	80 93 7a 00 	sts	0x007A, r24
			  
	//ATMega328 Datasheet Section 24.9.5 Pg 257 - DIDR0
	//This register allows digital input buffers on ADC pins to be disabled.  This saves power, so I'll do it
	//I have four channels: 0-3 which equates to 0x0F
	
	DIDR0 = 0x0F;	//Turn off digital filtering on ADC channels 0-3
 400:	8f e0       	ldi	r24, 0x0F	; 15
 402:	80 93 7e 00 	sts	0x007E, r24
	//Baud rate settings for fosc of 8MHZ
	//Choosing baud rate of 38.4K for minimum error
	//U2Xn = 0
	//UBRRn = 12
	
	UBRR0 = 12;
 406:	8c e0       	ldi	r24, 0x0C	; 12
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	90 93 c5 00 	sts	0x00C5, r25
 40e:	80 93 c4 00 	sts	0x00C4, r24
	//ATMega328 Datasheet Section 20.11.2 pg 194
	//Bits 7:2 - Status bits
	//Bit 1 - Double UART transmission speed - Yes : 1
	//Bit 0 - Multi-Processor Communication Mode - No:0
	
	UCSR0A = 0x00;
 412:	10 92 c0 00 	sts	0x00C0, r1
	//Bit 3 - Transmitter Enable - Set to 1
	//Bit 2 - Character Size Bit 2 - Set to 0 for 8 bits
	//Bit 1 - 9th receive bit - Ignore
	//Bit 0 - 9th transmit bit - Ignore
	
	UCSR0B = 0x00 | (1 << 3);
 416:	88 e0       	ldi	r24, 0x08	; 8
 418:	80 93 c1 00 	sts	0x00C1, r24
	//Bits 5:4 - Parity setting - None : 00
	//Bit 3 - Stop select - 1 : 0
	//Bit 2:1 - Character size - 8 : 11
	//Bit 0 - Clock polarity: Don't care : 0
	
	UCSR0C = 0x03 << 1;
 41c:	86 e0       	ldi	r24, 0x06	; 6
 41e:	80 93 c2 00 	sts	0x00C2, r24
	
	//Send a known pattern to verify the UART works
	UDR0 = 0xA5;
 422:	85 ea       	ldi	r24, 0xA5	; 165
 424:	80 93 c6 00 	sts	0x00C6, r24
	
	//Wait until transmit is complete
	while(FALSE == READ(UCSR0A,6));
 428:	e0 ec       	ldi	r30, 0xC0	; 192
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	86 ff       	sbrs	r24, 6
 430:	fd cf       	rjmp	.-6      	; 0x42c <main+0x72>
	
	UDR0 = 0x5A;
 432:	8a e5       	ldi	r24, 0x5A	; 90
 434:	80 93 c6 00 	sts	0x00C6, r24
	
	while(FALSE == READ(UCSR0A,6));
 438:	e0 ec       	ldi	r30, 0xC0	; 192
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	86 ff       	sbrs	r24, 6
 440:	fd cf       	rjmp	.-6      	; 0x43c <main+0x82>
	
	UDR0 = 0xA5;
 442:	85 ea       	ldi	r24, 0xA5	; 165
 444:	80 93 c6 00 	sts	0x00C6, r24
	
	//Wait until transmit is complete
	while(FALSE == READ(UCSR0A,6));
 448:	e0 ec       	ldi	r30, 0xC0	; 192
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	86 ff       	sbrs	r24, 6
 450:	fd cf       	rjmp	.-6      	; 0x44c <main+0x92>
	
	
	//Flash the LED for a second to show that initialization has successfully occurred
	//For some reason this does not last 1s at all
	SET(PORTD,7);
 452:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 454:	8f ef       	ldi	r24, 0xFF	; 255
 456:	99 e6       	ldi	r25, 0x69	; 105
 458:	a8 e1       	ldi	r26, 0x18	; 24
 45a:	81 50       	subi	r24, 0x01	; 1
 45c:	90 40       	sbci	r25, 0x00	; 0
 45e:	a0 40       	sbci	r26, 0x00	; 0
 460:	e1 f7       	brne	.-8      	; 0x45a <main+0xa0>
 462:	00 c0       	rjmp	.+0      	; 0x464 <main+0xaa>
 464:	00 00       	nop
	_delay_ms(1000);
	CLEAR(PORTD,7);
 466:	5f 98       	cbi	0x0b, 7	; 11
	//ATMega328 Datasheet Section 16.11.2 Pg 135 - TCCR1B
	//No Waveform generation: bits 4:3 = 0
	//No input capture: bits 7:6 = 0
	//Clock select: ClkIO/256 - bits 2:0 = 100b = 0x04
	
	TCCR1B = 0x04;	//This starts the counter/timer
 468:	84 e0       	ldi	r24, 0x04	; 4
 46a:	80 93 81 00 	sts	0x0081, r24
	boolean a;
	boolean timer_overflow;
	uint8_t i;
	uint8_t adc_y_axis;
	uint8_t accel_state = IDLE;
	int32_t filtered_y_axis = 0;
 46e:	cc 24       	eor	r12, r12
 470:	dd 24       	eor	r13, r13
 472:	76 01       	movw	r14, r12
			
		if(TRUE == timer_overflow)
		{
			SET(TIFR1,0);		//ATMega328 datasheet Section 16.11.9 pg137 - This clears the overflow flag

			TCNT1 = TIMER1_PERIOD;	//Reset the counter period
 474:	0f 2e       	mov	r0, r31
 476:	f4 e8       	ldi	r31, 0x84	; 132
 478:	8f 2e       	mov	r8, r31
 47a:	99 24       	eor	r9, r9
 47c:	f0 2d       	mov	r31, r0
 47e:	0f 2e       	mov	r0, r31
 480:	f9 ed       	ldi	r31, 0xD9	; 217
 482:	6f 2e       	mov	r6, r31
 484:	ff ef       	ldi	r31, 0xFF	; 255
 486:	7f 2e       	mov	r7, r31
 488:	f0 2d       	mov	r31, r0
*/
		//Handle reading ADC - Y axis
		if(TRUE == READ(events,EVENT_READ_ADC_Y))
		{

			SET(ADCSRA,6);	//Start conversion
 48a:	ca e7       	ldi	r28, 0x7A	; 122
 48c:	d0 e0       	ldi	r29, 0x00	; 0
			//Typical measured is ~14.5us
			while(FALSE == READ(ADCSRA,4));	
	
			SET(ADCSRA,4);	//Clear the interrupt flag by setting it to 1

			adc_y_axis = ADCH;	//Transfer ADC result to y-axis variable
 48e:	0f 2e       	mov	r0, r31
 490:	f9 e7       	ldi	r31, 0x79	; 121
 492:	4f 2e       	mov	r4, r31
 494:	55 24       	eor	r5, r5
 496:	f0 2d       	mov	r31, r0
		if(TRUE ==	READ(events,EVENT_DECIMATE))
		{
			velocity = compute_velocity(filtered_y_axis);


				UDR0 = (uint8_t)(filtered_y_axis>>24);
 498:	0f 2e       	mov	r0, r31
 49a:	f6 ec       	ldi	r31, 0xC6	; 198
 49c:	af 2e       	mov	r10, r31
 49e:	bb 24       	eor	r11, r11
 4a0:	f0 2d       	mov	r31, r0
				while(FALSE == READ(UCSR0A,6));
 4a2:	00 ec       	ldi	r16, 0xC0	; 192
 4a4:	10 e0       	ldi	r17, 0x00	; 0
    {

		//Determine what events need to be handled this frame
		
		//Handle system timer
		timer_overflow = READ(TIFR1,0);
 4a6:	b0 9b       	sbis	0x16, 0	; 22
 4a8:	2b c0       	rjmp	.+86     	; 0x500 <main+0x146>
 4aa:	82 c0       	rjmp	.+260    	; 0x5b0 <main+0x1f6>
				case 240:
				case 280:
				case 320:
				case 360:
				case 400:
					SET(events,EVENT_DECIMATE);
 4ac:	82 60       	ori	r24, 0x02	; 2
 4ae:	80 93 0a 01 	sts	0x010A, r24
 4b2:	90 93 0b 01 	sts	0x010B, r25
 4b6:	a0 93 0c 01 	sts	0x010C, r26
 4ba:	b0 93 0d 01 	sts	0x010D, r27
					break;
				default:
					break;
			}
			
			if(PERIOD_HB_LED == ticks)
 4be:	40 39       	cpi	r20, 0x90	; 144
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	59 07       	cpc	r21, r25
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	69 07       	cpc	r22, r25
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	79 07       	cpc	r23, r25
 4cc:	c9 f4       	brne	.+50     	; 0x500 <main+0x146>
			{
				ticks = 0;
 4ce:	10 92 0e 01 	sts	0x010E, r1
 4d2:	10 92 0f 01 	sts	0x010F, r1
 4d6:	10 92 10 01 	sts	0x0110, r1
 4da:	10 92 11 01 	sts	0x0111, r1
				//Signal that this event occurred in this frame
				SET(events,EVENT_500MS);
 4de:	80 91 0a 01 	lds	r24, 0x010A
 4e2:	90 91 0b 01 	lds	r25, 0x010B
 4e6:	a0 91 0c 01 	lds	r26, 0x010C
 4ea:	b0 91 0d 01 	lds	r27, 0x010D
 4ee:	81 60       	ori	r24, 0x01	; 1
 4f0:	80 93 0a 01 	sts	0x010A, r24
 4f4:	90 93 0b 01 	sts	0x010B, r25
 4f8:	a0 93 0c 01 	sts	0x010C, r26
 4fc:	b0 93 0d 01 	sts	0x010D, r27
			}
		}			
		
		//Check pushbutton
		if(TRUE == NOT(READ(PINC,4)))
 500:	34 99       	sbic	0x06, 4	; 6
 502:	11 c0       	rjmp	.+34     	; 0x526 <main+0x16c>
		{
			SET(events,EVENT_PUSHBUTTON);
 504:	80 91 0a 01 	lds	r24, 0x010A
 508:	90 91 0b 01 	lds	r25, 0x010B
 50c:	a0 91 0c 01 	lds	r26, 0x010C
 510:	b0 91 0d 01 	lds	r27, 0x010D
 514:	84 60       	ori	r24, 0x04	; 4
 516:	80 93 0a 01 	sts	0x010A, r24
 51a:	90 93 0b 01 	sts	0x010B, r25
 51e:	a0 93 0c 01 	sts	0x010C, r26
 522:	b0 93 0d 01 	sts	0x010D, r27
		{
			TOGGLE(PORTD,7);
		}
*/
		//Handle reading ADC - Y axis
		if(TRUE == READ(events,EVENT_READ_ADC_Y))
 526:	80 91 0a 01 	lds	r24, 0x010A
 52a:	83 ff       	sbrs	r24, 3
 52c:	11 c0       	rjmp	.+34     	; 0x550 <main+0x196>
		{

			SET(ADCSRA,6);	//Start conversion
 52e:	88 81       	ld	r24, Y
 530:	80 64       	ori	r24, 0x40	; 64
 532:	88 83       	st	Y, r24
			
			//Wait until conversion finishes - this should never be more than
			//25* (8000000/8)^-1 seconds, which is about 25us
			//Typical measured is ~14.5us
			while(FALSE == READ(ADCSRA,4));	
 534:	88 81       	ld	r24, Y
 536:	84 ff       	sbrs	r24, 4
 538:	fd cf       	rjmp	.-6      	; 0x534 <main+0x17a>
	
			SET(ADCSRA,4);	//Clear the interrupt flag by setting it to 1
 53a:	88 81       	ld	r24, Y
 53c:	80 61       	ori	r24, 0x10	; 16
 53e:	88 83       	st	Y, r24

			adc_y_axis = ADCH;	//Transfer ADC result to y-axis variable
 540:	d2 01       	movw	r26, r4
 542:	8c 91       	ld	r24, X
			
		
			//filtered_y_axis accel in 32-bit fixed-point format
			filtered_y_axis = adc_lp_filter(adc_y_axis);
 544:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_lp_filter>
			filtered_y_axis = adc_hp_filter(filtered_y_axis);
 548:	0e 94 c5 00 	call	0x18a	; 0x18a <adc_hp_filter>
 54c:	6b 01       	movw	r12, r22
 54e:	7c 01       	movw	r14, r24

			
		}	

		if(TRUE ==	READ(events,EVENT_DECIMATE))
 550:	80 91 0a 01 	lds	r24, 0x010A
 554:	81 ff       	sbrs	r24, 1
 556:	1b c0       	rjmp	.+54     	; 0x58e <main+0x1d4>
		{
			velocity = compute_velocity(filtered_y_axis);
 558:	c7 01       	movw	r24, r14
 55a:	b6 01       	movw	r22, r12
 55c:	0e 94 a3 01 	call	0x346	; 0x346 <compute_velocity>


				UDR0 = (uint8_t)(filtered_y_axis>>24);
 560:	8f 2d       	mov	r24, r15
 562:	bb 27       	eor	r27, r27
 564:	87 fd       	sbrc	r24, 7
 566:	b0 95       	com	r27
 568:	9b 2f       	mov	r25, r27
 56a:	ab 2f       	mov	r26, r27
 56c:	f5 01       	movw	r30, r10
 56e:	80 83       	st	Z, r24
				while(FALSE == READ(UCSR0A,6));
 570:	d8 01       	movw	r26, r16
 572:	8c 91       	ld	r24, X
 574:	86 ff       	sbrs	r24, 6
 576:	fc cf       	rjmp	.-8      	; 0x570 <main+0x1b6>
				UDR0 = (uint8_t)(filtered_y_axis>>16);
 578:	c7 01       	movw	r24, r14
 57a:	bb 27       	eor	r27, r27
 57c:	97 fd       	sbrc	r25, 7
 57e:	b0 95       	com	r27
 580:	ab 2f       	mov	r26, r27
 582:	f5 01       	movw	r30, r10
 584:	80 83       	st	Z, r24
				while(FALSE == READ(UCSR0A,6));
 586:	d8 01       	movw	r26, r16
 588:	8c 91       	ld	r24, X
 58a:	86 ff       	sbrs	r24, 6
 58c:	fc cf       	rjmp	.-8      	; 0x586 <main+0x1cc>
			}
*/

		}	
		
		if(TRUE == READ(events,EVENT_FORWARD_MOTION))
 58e:	80 91 0a 01 	lds	r24, 0x010A
 592:	84 fd       	sbrc	r24, 4
		{
			SET(PORTD,7);			
 594:	5f 9a       	sbi	0x0b, 7	; 11
		}

		if(TRUE == READ(events,EVENT_HALT))
 596:	80 91 0a 01 	lds	r24, 0x010A
 59a:	85 fd       	sbrc	r24, 5
		{
			//Turn yellow light on for 3s, then 
			CLEAR(PORTD,7);
 59c:	5f 98       	cbi	0x0b, 7	; 11
		//TOGGLE(PORTD,7);
		//PIND |= (1<<7);	

		
		//Clear all events in this frame
		events = 0x0000;
 59e:	10 92 0a 01 	sts	0x010A, r1
 5a2:	10 92 0b 01 	sts	0x010B, r1
 5a6:	10 92 0c 01 	sts	0x010C, r1
 5aa:	10 92 0d 01 	sts	0x010D, r1
    }
 5ae:	7b cf       	rjmp	.-266    	; 0x4a6 <main+0xec>
		//Handle system timer
		timer_overflow = READ(TIFR1,0);
			
		if(TRUE == timer_overflow)
		{
			SET(TIFR1,0);		//ATMega328 datasheet Section 16.11.9 pg137 - This clears the overflow flag
 5b0:	b0 9a       	sbi	0x16, 0	; 22

			TCNT1 = TIMER1_PERIOD;	//Reset the counter period
 5b2:	f4 01       	movw	r30, r8
 5b4:	71 82       	std	Z+1, r7	; 0x01
 5b6:	60 82       	st	Z, r6
			ticks++;
 5b8:	80 91 0e 01 	lds	r24, 0x010E
 5bc:	90 91 0f 01 	lds	r25, 0x010F
 5c0:	a0 91 10 01 	lds	r26, 0x0110
 5c4:	b0 91 11 01 	lds	r27, 0x0111
 5c8:	ac 01       	movw	r20, r24
 5ca:	bd 01       	movw	r22, r26
 5cc:	4f 5f       	subi	r20, 0xFF	; 255
 5ce:	5f 4f       	sbci	r21, 0xFF	; 255
 5d0:	6f 4f       	sbci	r22, 0xFF	; 255
 5d2:	7f 4f       	sbci	r23, 0xFF	; 255
 5d4:	40 93 0e 01 	sts	0x010E, r20
 5d8:	50 93 0f 01 	sts	0x010F, r21
 5dc:	60 93 10 01 	sts	0x0110, r22
 5e0:	70 93 11 01 	sts	0x0111, r23
			
			//Signal ADC Read - this is done every 1.25ms
			SET(events,EVENT_READ_ADC_Y);
 5e4:	80 91 0a 01 	lds	r24, 0x010A
 5e8:	90 91 0b 01 	lds	r25, 0x010B
 5ec:	a0 91 0c 01 	lds	r26, 0x010C
 5f0:	b0 91 0d 01 	lds	r27, 0x010D
 5f4:	88 60       	ori	r24, 0x08	; 8
 5f6:	80 93 0a 01 	sts	0x010A, r24
 5fa:	90 93 0b 01 	sts	0x010B, r25
 5fe:	a0 93 0c 01 	sts	0x010C, r26
 602:	b0 93 0d 01 	sts	0x010D, r27

			switch(ticks)
 606:	48 3c       	cpi	r20, 0xC8	; 200
 608:	51 05       	cpc	r21, r1
 60a:	61 05       	cpc	r22, r1
 60c:	71 05       	cpc	r23, r1
 60e:	09 f4       	brne	.+2      	; 0x612 <main+0x258>
 610:	4d cf       	rjmp	.-358    	; 0x4ac <main+0xf2>
 612:	49 3c       	cpi	r20, 0xC9	; 201
 614:	51 05       	cpc	r21, r1
 616:	61 05       	cpc	r22, r1
 618:	71 05       	cpc	r23, r1
 61a:	28 f5       	brcc	.+74     	; 0x666 <main+0x2ac>
 61c:	40 35       	cpi	r20, 0x50	; 80
 61e:	51 05       	cpc	r21, r1
 620:	61 05       	cpc	r22, r1
 622:	71 05       	cpc	r23, r1
 624:	09 f4       	brne	.+2      	; 0x628 <main+0x26e>
 626:	42 cf       	rjmp	.-380    	; 0x4ac <main+0xf2>
 628:	41 35       	cpi	r20, 0x51	; 81
 62a:	51 05       	cpc	r21, r1
 62c:	61 05       	cpc	r22, r1
 62e:	71 05       	cpc	r23, r1
 630:	68 f4       	brcc	.+26     	; 0x64c <main+0x292>
 632:	41 15       	cp	r20, r1
 634:	51 05       	cpc	r21, r1
 636:	61 05       	cpc	r22, r1
 638:	71 05       	cpc	r23, r1
 63a:	09 f4       	brne	.+2      	; 0x63e <main+0x284>
 63c:	37 cf       	rjmp	.-402    	; 0x4ac <main+0xf2>
 63e:	48 32       	cpi	r20, 0x28	; 40
 640:	51 05       	cpc	r21, r1
 642:	61 05       	cpc	r22, r1
 644:	71 05       	cpc	r23, r1
 646:	09 f0       	breq	.+2      	; 0x64a <main+0x290>
 648:	3a cf       	rjmp	.-396    	; 0x4be <main+0x104>
 64a:	30 cf       	rjmp	.-416    	; 0x4ac <main+0xf2>
 64c:	48 37       	cpi	r20, 0x78	; 120
 64e:	51 05       	cpc	r21, r1
 650:	61 05       	cpc	r22, r1
 652:	71 05       	cpc	r23, r1
 654:	09 f4       	brne	.+2      	; 0x658 <main+0x29e>
 656:	2a cf       	rjmp	.-428    	; 0x4ac <main+0xf2>
 658:	40 3a       	cpi	r20, 0xA0	; 160
 65a:	51 05       	cpc	r21, r1
 65c:	61 05       	cpc	r22, r1
 65e:	71 05       	cpc	r23, r1
 660:	09 f0       	breq	.+2      	; 0x664 <main+0x2aa>
 662:	2d cf       	rjmp	.-422    	; 0x4be <main+0x104>
 664:	23 cf       	rjmp	.-442    	; 0x4ac <main+0xf2>
 666:	40 34       	cpi	r20, 0x40	; 64
 668:	f1 e0       	ldi	r31, 0x01	; 1
 66a:	5f 07       	cpc	r21, r31
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	6f 07       	cpc	r22, r31
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	7f 07       	cpc	r23, r31
 674:	09 f4       	brne	.+2      	; 0x678 <main+0x2be>
 676:	1a cf       	rjmp	.-460    	; 0x4ac <main+0xf2>
 678:	41 34       	cpi	r20, 0x41	; 65
 67a:	21 e0       	ldi	r18, 0x01	; 1
 67c:	52 07       	cpc	r21, r18
 67e:	20 e0       	ldi	r18, 0x00	; 0
 680:	62 07       	cpc	r22, r18
 682:	20 e0       	ldi	r18, 0x00	; 0
 684:	72 07       	cpc	r23, r18
 686:	80 f4       	brcc	.+32     	; 0x6a8 <main+0x2ee>
 688:	40 3f       	cpi	r20, 0xF0	; 240
 68a:	51 05       	cpc	r21, r1
 68c:	61 05       	cpc	r22, r1
 68e:	71 05       	cpc	r23, r1
 690:	09 f4       	brne	.+2      	; 0x694 <main+0x2da>
 692:	0c cf       	rjmp	.-488    	; 0x4ac <main+0xf2>
 694:	48 31       	cpi	r20, 0x18	; 24
 696:	e1 e0       	ldi	r30, 0x01	; 1
 698:	5e 07       	cpc	r21, r30
 69a:	e0 e0       	ldi	r30, 0x00	; 0
 69c:	6e 07       	cpc	r22, r30
 69e:	e0 e0       	ldi	r30, 0x00	; 0
 6a0:	7e 07       	cpc	r23, r30
 6a2:	09 f0       	breq	.+2      	; 0x6a6 <main+0x2ec>
 6a4:	0c cf       	rjmp	.-488    	; 0x4be <main+0x104>
 6a6:	02 cf       	rjmp	.-508    	; 0x4ac <main+0xf2>
 6a8:	48 36       	cpi	r20, 0x68	; 104
 6aa:	f1 e0       	ldi	r31, 0x01	; 1
 6ac:	5f 07       	cpc	r21, r31
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	6f 07       	cpc	r22, r31
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	7f 07       	cpc	r23, r31
 6b6:	09 f4       	brne	.+2      	; 0x6ba <main+0x300>
 6b8:	f9 ce       	rjmp	.-526    	; 0x4ac <main+0xf2>
 6ba:	40 39       	cpi	r20, 0x90	; 144
 6bc:	21 e0       	ldi	r18, 0x01	; 1
 6be:	52 07       	cpc	r21, r18
 6c0:	20 e0       	ldi	r18, 0x00	; 0
 6c2:	62 07       	cpc	r22, r18
 6c4:	20 e0       	ldi	r18, 0x00	; 0
 6c6:	72 07       	cpc	r23, r18
 6c8:	09 f0       	breq	.+2      	; 0x6cc <main+0x312>
 6ca:	f9 ce       	rjmp	.-526    	; 0x4be <main+0x104>
 6cc:	ef ce       	rjmp	.-546    	; 0x4ac <main+0xf2>

000006ce <__muldi3>:
 6ce:	a0 e3       	ldi	r26, 0x30	; 48
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	ed e6       	ldi	r30, 0x6D	; 109
 6d4:	f3 e0       	ldi	r31, 0x03	; 3
 6d6:	0c 94 c9 04 	jmp	0x992	; 0x992 <__prologue_saves__+0x4>
 6da:	29 8f       	std	Y+25, r18	; 0x19
 6dc:	3a 8f       	std	Y+26, r19	; 0x1a
 6de:	4b 8f       	std	Y+27, r20	; 0x1b
 6e0:	5c 8f       	std	Y+28, r21	; 0x1c
 6e2:	6d 8f       	std	Y+29, r22	; 0x1d
 6e4:	7e 8f       	std	Y+30, r23	; 0x1e
 6e6:	8f 8f       	std	Y+31, r24	; 0x1f
 6e8:	98 a3       	lds	r25, 0x58
 6ea:	a9 8a       	std	Y+17, r10	; 0x11
 6ec:	ba 8a       	std	Y+18, r11	; 0x12
 6ee:	cb 8a       	std	Y+19, r12	; 0x13
 6f0:	dc 8a       	std	Y+20, r13	; 0x14
 6f2:	ed 8a       	std	Y+21, r14	; 0x15
 6f4:	fe 8a       	std	Y+22, r15	; 0x16
 6f6:	0f 8b       	std	Y+23, r16	; 0x17
 6f8:	18 8f       	std	Y+24, r17	; 0x18
 6fa:	09 8d       	ldd	r16, Y+25	; 0x19
 6fc:	1a 8d       	ldd	r17, Y+26	; 0x1a
 6fe:	2b 8d       	ldd	r18, Y+27	; 0x1b
 700:	3c 8d       	ldd	r19, Y+28	; 0x1c
 702:	09 a3       	lds	r16, 0x59
 704:	1a a3       	lds	r17, 0x5a
 706:	2b a3       	lds	r18, 0x5b
 708:	3c a3       	lds	r19, 0x5c
 70a:	68 01       	movw	r12, r16
 70c:	79 01       	movw	r14, r18
 70e:	8f ef       	ldi	r24, 0xFF	; 255
 710:	9f ef       	ldi	r25, 0xFF	; 255
 712:	a0 e0       	ldi	r26, 0x00	; 0
 714:	b0 e0       	ldi	r27, 0x00	; 0
 716:	c8 22       	and	r12, r24
 718:	d9 22       	and	r13, r25
 71a:	ea 22       	and	r14, r26
 71c:	fb 22       	and	r15, r27
 71e:	89 01       	movw	r16, r18
 720:	22 27       	eor	r18, r18
 722:	33 27       	eor	r19, r19
 724:	09 a7       	lds	r16, 0x79
 726:	1a a7       	lds	r17, 0x7a
 728:	2b a7       	lds	r18, 0x7b
 72a:	3c a7       	lds	r19, 0x7c
 72c:	09 89       	ldd	r16, Y+17	; 0x11
 72e:	1a 89       	ldd	r17, Y+18	; 0x12
 730:	2b 89       	ldd	r18, Y+19	; 0x13
 732:	3c 89       	ldd	r19, Y+20	; 0x14
 734:	0d a3       	lds	r16, 0x5d
 736:	1e a3       	lds	r17, 0x5e
 738:	2f a3       	lds	r18, 0x5f
 73a:	38 a7       	lds	r19, 0x78
 73c:	48 01       	movw	r8, r16
 73e:	59 01       	movw	r10, r18
 740:	88 22       	and	r8, r24
 742:	99 22       	and	r9, r25
 744:	aa 22       	and	r10, r26
 746:	bb 22       	and	r11, r27
 748:	29 01       	movw	r4, r18
 74a:	66 24       	eor	r6, r6
 74c:	77 24       	eor	r7, r7
 74e:	c5 01       	movw	r24, r10
 750:	b4 01       	movw	r22, r8
 752:	a7 01       	movw	r20, r14
 754:	96 01       	movw	r18, r12
 756:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsi3>
 75a:	6d a7       	lds	r22, 0x7d
 75c:	7e a7       	lds	r23, 0x7e
 75e:	8f a7       	lds	r24, 0x7f
 760:	98 ab       	sts	0x58, r25
 762:	c3 01       	movw	r24, r6
 764:	b2 01       	movw	r22, r4
 766:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsi3>
 76a:	6b 01       	movw	r12, r22
 76c:	7c 01       	movw	r14, r24
 76e:	c5 01       	movw	r24, r10
 770:	b4 01       	movw	r22, r8
 772:	29 a5       	lds	r18, 0x69
 774:	3a a5       	lds	r19, 0x6a
 776:	4b a5       	lds	r20, 0x6b
 778:	5c a5       	lds	r21, 0x6c
 77a:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsi3>
 77e:	4b 01       	movw	r8, r22
 780:	5c 01       	movw	r10, r24
 782:	c3 01       	movw	r24, r6
 784:	b2 01       	movw	r22, r4
 786:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsi3>
 78a:	ab 01       	movw	r20, r22
 78c:	bc 01       	movw	r22, r24
 78e:	c8 0c       	add	r12, r8
 790:	d9 1c       	adc	r13, r9
 792:	ea 1c       	adc	r14, r10
 794:	fb 1c       	adc	r15, r11
 796:	0d a5       	lds	r16, 0x6d
 798:	1e a5       	lds	r17, 0x6e
 79a:	2f a5       	lds	r18, 0x6f
 79c:	38 a9       	sts	0x48, r19
 79e:	c9 01       	movw	r24, r18
 7a0:	aa 27       	eor	r26, r26
 7a2:	bb 27       	eor	r27, r27
 7a4:	c8 0e       	add	r12, r24
 7a6:	d9 1e       	adc	r13, r25
 7a8:	ea 1e       	adc	r14, r26
 7aa:	fb 1e       	adc	r15, r27
 7ac:	c8 14       	cp	r12, r8
 7ae:	d9 04       	cpc	r13, r9
 7b0:	ea 04       	cpc	r14, r10
 7b2:	fb 04       	cpc	r15, r11
 7b4:	20 f4       	brcc	.+8      	; 0x7be <__muldi3+0xf0>
 7b6:	40 50       	subi	r20, 0x00	; 0
 7b8:	50 40       	sbci	r21, 0x00	; 0
 7ba:	6f 4f       	sbci	r22, 0xFF	; 255
 7bc:	7f 4f       	sbci	r23, 0xFF	; 255
 7be:	c7 01       	movw	r24, r14
 7c0:	aa 27       	eor	r26, r26
 7c2:	bb 27       	eor	r27, r27
 7c4:	84 0f       	add	r24, r20
 7c6:	95 1f       	adc	r25, r21
 7c8:	a6 1f       	adc	r26, r22
 7ca:	b7 1f       	adc	r27, r23
 7cc:	8d 83       	std	Y+5, r24	; 0x05
 7ce:	9e 83       	std	Y+6, r25	; 0x06
 7d0:	af 83       	std	Y+7, r26	; 0x07
 7d2:	b8 87       	std	Y+8, r27	; 0x08
 7d4:	76 01       	movw	r14, r12
 7d6:	dd 24       	eor	r13, r13
 7d8:	cc 24       	eor	r12, r12
 7da:	4d a5       	lds	r20, 0x6d
 7dc:	5e a5       	lds	r21, 0x6e
 7de:	6f a5       	lds	r22, 0x6f
 7e0:	78 a9       	sts	0x48, r23
 7e2:	60 70       	andi	r22, 0x00	; 0
 7e4:	70 70       	andi	r23, 0x00	; 0
 7e6:	c4 0e       	add	r12, r20
 7e8:	d5 1e       	adc	r13, r21
 7ea:	e6 1e       	adc	r14, r22
 7ec:	f7 1e       	adc	r15, r23
 7ee:	c9 82       	std	Y+1, r12	; 0x01
 7f0:	da 82       	std	Y+2, r13	; 0x02
 7f2:	eb 82       	std	Y+3, r14	; 0x03
 7f4:	fc 82       	std	Y+4, r15	; 0x04
 7f6:	1c 2d       	mov	r17, r12
 7f8:	0a 81       	ldd	r16, Y+2	; 0x02
 7fa:	8b 80       	ldd	r8, Y+3	; 0x03
 7fc:	4c 80       	ldd	r4, Y+4	; 0x04
 7fe:	8d 87       	std	Y+13, r24	; 0x0d
 800:	8e 81       	ldd	r24, Y+6	; 0x06
 802:	8e 87       	std	Y+14, r24	; 0x0e
 804:	8f 81       	ldd	r24, Y+7	; 0x07
 806:	8f 87       	std	Y+15, r24	; 0x0f
 808:	88 85       	ldd	r24, Y+8	; 0x08
 80a:	88 8b       	std	Y+16, r24	; 0x10
 80c:	2d 89       	ldd	r18, Y+21	; 0x15
 80e:	3e 89       	ldd	r19, Y+22	; 0x16
 810:	4f 89       	ldd	r20, Y+23	; 0x17
 812:	58 8d       	ldd	r21, Y+24	; 0x18
 814:	69 a1       	lds	r22, 0x49
 816:	7a a1       	lds	r23, 0x4a
 818:	8b a1       	lds	r24, 0x4b
 81a:	9c a1       	lds	r25, 0x4c
 81c:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsi3>
 820:	6b 01       	movw	r12, r22
 822:	7c 01       	movw	r14, r24
 824:	2d 8d       	ldd	r18, Y+29	; 0x1d
 826:	3e 8d       	ldd	r19, Y+30	; 0x1e
 828:	4f 8d       	ldd	r20, Y+31	; 0x1f
 82a:	58 a1       	lds	r21, 0x48
 82c:	6d a1       	lds	r22, 0x4d
 82e:	7e a1       	lds	r23, 0x4e
 830:	8f a1       	lds	r24, 0x4f
 832:	98 a5       	lds	r25, 0x68
 834:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsi3>
 838:	dc 01       	movw	r26, r24
 83a:	cb 01       	movw	r24, r22
 83c:	c8 0e       	add	r12, r24
 83e:	d9 1e       	adc	r13, r25
 840:	ea 1e       	adc	r14, r26
 842:	fb 1e       	adc	r15, r27
 844:	8d 85       	ldd	r24, Y+13	; 0x0d
 846:	9e 85       	ldd	r25, Y+14	; 0x0e
 848:	af 85       	ldd	r26, Y+15	; 0x0f
 84a:	b8 89       	ldd	r27, Y+16	; 0x10
 84c:	8c 0d       	add	r24, r12
 84e:	9d 1d       	adc	r25, r13
 850:	ae 1d       	adc	r26, r14
 852:	bf 1d       	adc	r27, r15
 854:	8d 87       	std	Y+13, r24	; 0x0d
 856:	9e 87       	std	Y+14, r25	; 0x0e
 858:	af 87       	std	Y+15, r26	; 0x0f
 85a:	b8 8b       	std	Y+16, r27	; 0x10
 85c:	68 2f       	mov	r22, r24
 85e:	7e 85       	ldd	r23, Y+14	; 0x0e
 860:	21 2f       	mov	r18, r17
 862:	30 2f       	mov	r19, r16
 864:	48 2d       	mov	r20, r8
 866:	54 2d       	mov	r21, r4
 868:	8f 85       	ldd	r24, Y+15	; 0x0f
 86a:	98 89       	ldd	r25, Y+16	; 0x10
 86c:	e0 96       	adiw	r28, 0x30	; 48
 86e:	e0 e1       	ldi	r30, 0x10	; 16
 870:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__epilogue_restores__+0x4>

00000874 <__ashrdi3>:
 874:	0f 93       	push	r16
 876:	cf 93       	push	r28
 878:	df 93       	push	r29
 87a:	cd b7       	in	r28, 0x3d	; 61
 87c:	de b7       	in	r29, 0x3e	; 62
 87e:	60 97       	sbiw	r28, 0x10	; 16
 880:	0f b6       	in	r0, 0x3f	; 63
 882:	f8 94       	cli
 884:	de bf       	out	0x3e, r29	; 62
 886:	0f be       	out	0x3f, r0	; 63
 888:	cd bf       	out	0x3d, r28	; 61
 88a:	00 23       	and	r16, r16
 88c:	09 f4       	brne	.+2      	; 0x890 <__ashrdi3+0x1c>
 88e:	56 c0       	rjmp	.+172    	; 0x93c <__stack+0x3d>
 890:	29 87       	std	Y+9, r18	; 0x09
 892:	3a 87       	std	Y+10, r19	; 0x0a
 894:	4b 87       	std	Y+11, r20	; 0x0b
 896:	5c 87       	std	Y+12, r21	; 0x0c
 898:	6d 87       	std	Y+13, r22	; 0x0d
 89a:	7e 87       	std	Y+14, r23	; 0x0e
 89c:	8f 87       	std	Y+15, r24	; 0x0f
 89e:	98 8b       	std	Y+16, r25	; 0x10
 8a0:	20 e2       	ldi	r18, 0x20	; 32
 8a2:	20 1b       	sub	r18, r16
 8a4:	8d 85       	ldd	r24, Y+13	; 0x0d
 8a6:	9e 85       	ldd	r25, Y+14	; 0x0e
 8a8:	af 85       	ldd	r26, Y+15	; 0x0f
 8aa:	b8 89       	ldd	r27, Y+16	; 0x10
 8ac:	ac 01       	movw	r20, r24
 8ae:	bd 01       	movw	r22, r26
 8b0:	12 16       	cp	r1, r18
 8b2:	b4 f0       	brlt	.+44     	; 0x8e0 <__ashrdi3+0x6c>
 8b4:	77 0f       	add	r23, r23
 8b6:	44 0b       	sbc	r20, r20
 8b8:	54 2f       	mov	r21, r20
 8ba:	ba 01       	movw	r22, r20
 8bc:	4d 83       	std	Y+5, r20	; 0x05
 8be:	5e 83       	std	Y+6, r21	; 0x06
 8c0:	6f 83       	std	Y+7, r22	; 0x07
 8c2:	78 87       	std	Y+8, r23	; 0x08
 8c4:	33 27       	eor	r19, r19
 8c6:	27 fd       	sbrc	r18, 7
 8c8:	30 95       	com	r19
 8ca:	30 95       	com	r19
 8cc:	21 95       	neg	r18
 8ce:	3f 4f       	sbci	r19, 0xFF	; 255
 8d0:	04 c0       	rjmp	.+8      	; 0x8da <__ashrdi3+0x66>
 8d2:	b5 95       	asr	r27
 8d4:	a7 95       	ror	r26
 8d6:	97 95       	ror	r25
 8d8:	87 95       	ror	r24
 8da:	2a 95       	dec	r18
 8dc:	d2 f7       	brpl	.-12     	; 0x8d2 <__ashrdi3+0x5e>
 8de:	22 c0       	rjmp	.+68     	; 0x924 <__stack+0x25>
 8e0:	00 2e       	mov	r0, r16
 8e2:	04 c0       	rjmp	.+8      	; 0x8ec <__ashrdi3+0x78>
 8e4:	75 95       	asr	r23
 8e6:	67 95       	ror	r22
 8e8:	57 95       	ror	r21
 8ea:	47 95       	ror	r20
 8ec:	0a 94       	dec	r0
 8ee:	d2 f7       	brpl	.-12     	; 0x8e4 <__ashrdi3+0x70>
 8f0:	4d 83       	std	Y+5, r20	; 0x05
 8f2:	5e 83       	std	Y+6, r21	; 0x06
 8f4:	6f 83       	std	Y+7, r22	; 0x07
 8f6:	78 87       	std	Y+8, r23	; 0x08
 8f8:	04 c0       	rjmp	.+8      	; 0x902 <__stack+0x3>
 8fa:	88 0f       	add	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	aa 1f       	adc	r26, r26
 900:	bb 1f       	adc	r27, r27
 902:	2a 95       	dec	r18
 904:	d2 f7       	brpl	.-12     	; 0x8fa <__ashrdi3+0x86>
 906:	49 85       	ldd	r20, Y+9	; 0x09
 908:	5a 85       	ldd	r21, Y+10	; 0x0a
 90a:	6b 85       	ldd	r22, Y+11	; 0x0b
 90c:	7c 85       	ldd	r23, Y+12	; 0x0c
 90e:	04 c0       	rjmp	.+8      	; 0x918 <__stack+0x19>
 910:	76 95       	lsr	r23
 912:	67 95       	ror	r22
 914:	57 95       	ror	r21
 916:	47 95       	ror	r20
 918:	0a 95       	dec	r16
 91a:	d2 f7       	brpl	.-12     	; 0x910 <__stack+0x11>
 91c:	84 2b       	or	r24, r20
 91e:	95 2b       	or	r25, r21
 920:	a6 2b       	or	r26, r22
 922:	b7 2b       	or	r27, r23
 924:	89 83       	std	Y+1, r24	; 0x01
 926:	9a 83       	std	Y+2, r25	; 0x02
 928:	ab 83       	std	Y+3, r26	; 0x03
 92a:	bc 83       	std	Y+4, r27	; 0x04
 92c:	29 81       	ldd	r18, Y+1	; 0x01
 92e:	3a 81       	ldd	r19, Y+2	; 0x02
 930:	4b 81       	ldd	r20, Y+3	; 0x03
 932:	5c 81       	ldd	r21, Y+4	; 0x04
 934:	6d 81       	ldd	r22, Y+5	; 0x05
 936:	7e 81       	ldd	r23, Y+6	; 0x06
 938:	8f 81       	ldd	r24, Y+7	; 0x07
 93a:	98 85       	ldd	r25, Y+8	; 0x08
 93c:	60 96       	adiw	r28, 0x10	; 16
 93e:	0f b6       	in	r0, 0x3f	; 63
 940:	f8 94       	cli
 942:	de bf       	out	0x3e, r29	; 62
 944:	0f be       	out	0x3f, r0	; 63
 946:	cd bf       	out	0x3d, r28	; 61
 948:	df 91       	pop	r29
 94a:	cf 91       	pop	r28
 94c:	0f 91       	pop	r16
 94e:	08 95       	ret

00000950 <__mulsi3>:
 950:	62 9f       	mul	r22, r18
 952:	d0 01       	movw	r26, r0
 954:	73 9f       	mul	r23, r19
 956:	f0 01       	movw	r30, r0
 958:	82 9f       	mul	r24, r18
 95a:	e0 0d       	add	r30, r0
 95c:	f1 1d       	adc	r31, r1
 95e:	64 9f       	mul	r22, r20
 960:	e0 0d       	add	r30, r0
 962:	f1 1d       	adc	r31, r1
 964:	92 9f       	mul	r25, r18
 966:	f0 0d       	add	r31, r0
 968:	83 9f       	mul	r24, r19
 96a:	f0 0d       	add	r31, r0
 96c:	74 9f       	mul	r23, r20
 96e:	f0 0d       	add	r31, r0
 970:	65 9f       	mul	r22, r21
 972:	f0 0d       	add	r31, r0
 974:	99 27       	eor	r25, r25
 976:	72 9f       	mul	r23, r18
 978:	b0 0d       	add	r27, r0
 97a:	e1 1d       	adc	r30, r1
 97c:	f9 1f       	adc	r31, r25
 97e:	63 9f       	mul	r22, r19
 980:	b0 0d       	add	r27, r0
 982:	e1 1d       	adc	r30, r1
 984:	f9 1f       	adc	r31, r25
 986:	bd 01       	movw	r22, r26
 988:	cf 01       	movw	r24, r30
 98a:	11 24       	eor	r1, r1
 98c:	08 95       	ret

0000098e <__prologue_saves__>:
 98e:	2f 92       	push	r2
 990:	3f 92       	push	r3
 992:	4f 92       	push	r4
 994:	5f 92       	push	r5
 996:	6f 92       	push	r6
 998:	7f 92       	push	r7
 99a:	8f 92       	push	r8
 99c:	9f 92       	push	r9
 99e:	af 92       	push	r10
 9a0:	bf 92       	push	r11
 9a2:	cf 92       	push	r12
 9a4:	df 92       	push	r13
 9a6:	ef 92       	push	r14
 9a8:	ff 92       	push	r15
 9aa:	0f 93       	push	r16
 9ac:	1f 93       	push	r17
 9ae:	cf 93       	push	r28
 9b0:	df 93       	push	r29
 9b2:	cd b7       	in	r28, 0x3d	; 61
 9b4:	de b7       	in	r29, 0x3e	; 62
 9b6:	ca 1b       	sub	r28, r26
 9b8:	db 0b       	sbc	r29, r27
 9ba:	0f b6       	in	r0, 0x3f	; 63
 9bc:	f8 94       	cli
 9be:	de bf       	out	0x3e, r29	; 62
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	cd bf       	out	0x3d, r28	; 61
 9c4:	09 94       	ijmp

000009c6 <__epilogue_restores__>:
 9c6:	2a 88       	ldd	r2, Y+18	; 0x12
 9c8:	39 88       	ldd	r3, Y+17	; 0x11
 9ca:	48 88       	ldd	r4, Y+16	; 0x10
 9cc:	5f 84       	ldd	r5, Y+15	; 0x0f
 9ce:	6e 84       	ldd	r6, Y+14	; 0x0e
 9d0:	7d 84       	ldd	r7, Y+13	; 0x0d
 9d2:	8c 84       	ldd	r8, Y+12	; 0x0c
 9d4:	9b 84       	ldd	r9, Y+11	; 0x0b
 9d6:	aa 84       	ldd	r10, Y+10	; 0x0a
 9d8:	b9 84       	ldd	r11, Y+9	; 0x09
 9da:	c8 84       	ldd	r12, Y+8	; 0x08
 9dc:	df 80       	ldd	r13, Y+7	; 0x07
 9de:	ee 80       	ldd	r14, Y+6	; 0x06
 9e0:	fd 80       	ldd	r15, Y+5	; 0x05
 9e2:	0c 81       	ldd	r16, Y+4	; 0x04
 9e4:	1b 81       	ldd	r17, Y+3	; 0x03
 9e6:	aa 81       	ldd	r26, Y+2	; 0x02
 9e8:	b9 81       	ldd	r27, Y+1	; 0x01
 9ea:	ce 0f       	add	r28, r30
 9ec:	d1 1d       	adc	r29, r1
 9ee:	0f b6       	in	r0, 0x3f	; 63
 9f0:	f8 94       	cli
 9f2:	de bf       	out	0x3e, r29	; 62
 9f4:	0f be       	out	0x3f, r0	; 63
 9f6:	cd bf       	out	0x3d, r28	; 61
 9f8:	ed 01       	movw	r28, r26
 9fa:	08 95       	ret

000009fc <_exit>:
 9fc:	f8 94       	cli

000009fe <__stop_program>:
 9fe:	ff cf       	rjmp	.-2      	; 0x9fe <__stop_program>
